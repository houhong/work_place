package xom.it.houhong.二叉树;

import java.util.Stack;

import org.ietf.jgss.Oid;
/*
 * 二叉排序树
 */

public class BST<E extends Comparable<E>>{


	public Node root;
	public int size;
	public BST() {

		this.size=size;

	}

	//节点
	private class Node{

		public E e;
		public Node left,right;

		public Node() {
			this.e = e;
			this.left=null;
			this.right=null;
		}

		public Node(E e){
			this.e=e;
		}

	}



	//生成set和get方法
	public Node getRoot() {
		return root;
	}

	public void setRoot(Node root) {
		this.root = root;
	}

	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	//写深度
	public String generateDepthString(int depth){

		StringBuilder res = new StringBuilder();

		for (int i = 0; i < depth; i++) {
			res.append("--");
		}
		return res.toString();
	}

	//生成一颗二叉树 --递归
	public void generateBST(Node node,int depth,StringBuilder res){

		if (node==null) {
			res.append(generateDepthString(depth)+"null\n");
			return;
		}
		//输出根节点
		res.append(generateDepthString(depth)+node.e+"\n");

		//左孩子
		generateBST(node.left, depth+1, res);
		//右孩子
		generateBST(node.right, depth+1, res);

	}

	@Override
	public String toString() {
		StringBuilder res = new StringBuilder();
		generateBST(root, 0,res );
		return res.toString();

	}

	public boolean isEmpty(){

		return size==0;
	}

	//先序遍历  --非递归
	public void preOrderNR(){

		preOrderNR(root);

	}
	public void preOrderNR(Node node){

		//一路向左--利用栈
		Stack<Node> stack = new Stack<>();
		while (node!=null && !stack.isEmpty()) {
			
		}
		//1：存入根节点，用于查找右节点
		
		while(node!=null){
			System.out.println(node.e);
			stack.push(node);
			node=node.left;
		}

		//找出右节点
		if(!stack.isEmpty()) {
			node=stack.pop();
			node=node.right;
		}




	}


	//添加元素的办法
	public void add(E e){

		root = add(root, e);

	}
	//返回插入后的根节点
	public Node add(Node node,E e){


		if(node == null){
			size++;
			return new Node(e);
		}

		if (e.compareTo(node.e)<0 && node !=null) {
			node.left=add(node.left, e);
		}
		if(e.compareTo(node.e) >0 && node !=null){
			node.right=add(node.right, e);
		}
		return node;
	}


	/*if (node==null || e.compareTo(node.e)==0) {
			return;
		}else {
			if (e.compareTo(node.e)<0 && node !=null) {
				add(node.left,e);
				return;
			}
			if(e.compareTo(node.e)>0 && node !=null){
				add(node.right, e);
				return;
			}
		}


		if (e.compareTo(node.e)<0 && node !=null) {
			node.left = new Node(e);
		}
		if (e.compareTo(node.e)>0 && node !=null) {
			node.right = new Node(e);
		}
	 */
}





