package xom.it.houhong.二叉树;

public class BST1<E extends Comparable<E>> {

	private class Node {
		public E e;
		public Node left, right;

		public Node(E e) {
			this.e = e;
			left = null;
			right = null;
		}
	}

	private Node root;
	private int size;

	public BST1(){
		root = null;
		size = 0;
	}

	public int size(){
		return size;
	}

	public boolean isEmpty(){
		return size == 0;
	}

	// 向二分搜索树中添加新的元素e
	public void add(E e){
		root = add(root, e);
	}

	// 向以node为根的二分搜索树中插入元素e，递归算法
	// 返回插入新节点后二分搜索树的根
	private Node add(Node node, E e){
		if(node == null){
			size ++;
			return new Node(e);
		}

		if(e.compareTo(node.e) < 0)
			node.left = add(node.left, e);
		else if(e.compareTo(node.e) > 0)
			node.right = add(node.right, e);

		return node;
	}

	// 看二分搜索树中是否包含元素e
	public boolean contains(E e){
		return contains(root, e);
	}

	// 看以node为根的二分搜索树中是否包含元素e, 递归算法
	private boolean contains(Node node, E e){

		if(node == null)
			return false;

		if(e.compareTo(node.e) == 0)
			return true;
		else if(e.compareTo(node.e) < 0)
			return contains(node.left, e);
		else // e.compareTo(node.e) > 0
			return contains(node.right, e);
	}

	//二叉树的前序遍历
	public void preOrder(){

		preOrder(root);
	}

	public void preOrder(Node node){

		if (node==null) {
			return;
		}
		preOrder(node.left);
		preOrder(node.right);


	}
	
	//生成二叉树 --递归
	public void generateDepthString(Node node,int depth,StringBuilder res){
		
		
		if (node == null) {
			
			res.append(generateDepthString(depth)+"null\n");
			return;
		}
		
	}
	
	
	
	
	//输出层次
	public String  generateDepthString(int depth){
		
		 StringBuilder res = new StringBuilder();
		 
		 for (int i = 0; i < depth; i++) {
			res.append("--");
		}
		 //返回当前的值
		 return res.toString();
	}


	/*
	// 二分搜索树的前序遍历
	public void preOrder(){
		preOrder(root);
	}




	//前序遍历以node为根的二分搜索树, 递归算法
	private void preOrder(Node node){

		if (node == null) {
			return;
		}
		//输出当前的值
		System.out.println(node.e);

		//一路到底
		preOrder(node.left);
		preOrder(node.right);
	}

	//toString 方法
	@Override
	public String toString(){
		StringBuilder res = new StringBuilder();
		generateBSTString(root, 0, res);
		return res.toString();
	}

	private void generateBSTString(Node node,int depth,StringBuilder res){

		//到最底层了
		if(node == null){
			res.append(generateDepthString(depth)+"null\n");
			return;
		}
		//输出根节点元素
		res.append(generateDepthString(depth)+node.e+"null\n");

		//先输出最左边的值
		generateBSTString(node.left, depth+1, res);
		//再输出最右边的值
		generateBSTString(node.right, depth+1, res);

	}

	// 生成以node为根节点，深度为depth的描述二叉树的字符串
	private void generateBSTString(Node node, int depth, StringBuilder res){

		if(node == null){
			res.append(generateDepthString(depth) + "null\n");
			return;
		}

		res.append(generateDepthString(depth) + node.e + "\n");
		generateBSTString(node.left, depth + 1, res);
		generateBSTString(node.right, depth + 1, res);
	}

	//以输出层次
	private String generateDepthString(int depth){

		StringBuilder res= new StringBuilder();

		for (int i = 0; i < depth; i++) {
			res.append("--");
		}

		return res.toString();
	}
	 */
	/*
	private String generateDepthString(int depth){
		StringBuilder res = new StringBuilder();
		for(int i = 0 ; i < depth ; i ++)
			res.append("--");
		return res.toString();
	}*/
}
